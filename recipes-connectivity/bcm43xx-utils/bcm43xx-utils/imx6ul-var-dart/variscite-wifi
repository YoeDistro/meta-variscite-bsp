#!/bin/sh -e
#
# Activate WIFI on Variscite DART-6UL / VAR-SOM-6UL
#

# GPIO pin to supply power to WIFI module on DART-6UL-5G
WIFI_PWR_GPIO="gpiochip4 2"

# GPIO pin to enable WIFI module
WIFI_EN_GPIO="gpiochip4 6"

# GPIO pin to enable BT module
BT_EN_GPIO="gpiochip4 4"

# WIFI MMC host
WIFI_MMC_HOST=2190000.mmc

# Get the SOM revision
get_somrev() {
	# Get the raw output
	raw_output=$(i2cget -f -y 0x1 0x51 0xfd)

	# Convert the output to decimal
	decimal_output=$(( $raw_output ))

	# Extract the relevant bits for SOM revision (using bits 3 and 4)
	som_info=$(( (decimal_output >> 3) & 0x3 ))

	# Determine the SOM revision based on the extracted bits
	case $som_info in
	0)
		echo "SOM Rev 1"
		;;
	1)
		echo "SOM Rev 2 (5G)"
		;;
	2)
		echo "SOM Rev 2 (5G) (IW611)"
		;;
	3)
		echo "SOM Rev 2 (5G) (IW612)"
		;;
	*)
		echo "SOM Rev illegal!"
		;;
	esac
}

# Check if the SOM uses IW611/IW612
som_uses_iw61x() {
	somrev=$(get_somrev)

	if [[ "$somrev" == "SOM Rev 2 (5G) (IW611)" || \
	      "$somrev" == "SOM Rev 2 (5G) (IW612)" ]]; then
		return 0  # True, it uses IW611 or IW612
	else
		return 1  # False, it doesn't use IW611/IW612
	fi
}

# Function to disable a network interface
disable_network_interface() {
	local iface="$1"
	# Check if the interface exists
	if ip link show "$iface" &>/dev/null; then
		ip link set dev "$iface" down
	fi
}

# Check is SOM is DART-6UL-5G
som_is_dart_6ul_5g()
{
	SOM_INFO=`i2cget -y 1 0x51 0xfd`
	if [[ $(($(($SOM_INFO >> 3)) & 0x3)) == 1 ]] ; then
		return 0
	fi

	return 1
}

# Return true if WIFI interface exists
wifi_interface_exists()
{
	for i in $(seq 1 20); do
		if [ -d /sys/class/net/wlan0 ]; then
			return 0
		else
			sleep 1
		fi
	done

	return 1
}

# Bind WIFI device to MMC controller
wifi_mmc_bind()
{
	if [ -e /sys/bus/platform/drivers/sdhci-esdhc-imx/bind ]; then
		echo ${WIFI_MMC_HOST} > /sys/bus/platform/drivers/sdhci-esdhc-imx/bind
	fi
}

# Unbind WIFI device from MMC controller
wifi_mmc_unbind()
{
	if [ -e /sys/bus/platform/drivers/sdhci-esdhc-imx/${WIFI_MMC_HOST} ]; then
		echo ${WIFI_MMC_HOST} > /sys/bus/platform/drivers/sdhci-esdhc-imx/unbind
	fi
}

wifi_up_iw61x()
{
	modprobe moal mod_para=nxp/var_wifi_mod_para.conf
}

# Power up WIFI chip
wifi_up_bcm43xx()
{
	# Unbind WIFI device from MMC controller
	wifi_mmc_unbind

	if som_is_dart_6ul_5g; then
		# WIFI power up
		gpioset ${WIFI_PWR_GPIO}=1
		usleep 10000

		# WLAN_EN up
		gpioset ${WIFI_EN_GPIO}=1

		# BT_EN up
		gpioset ${BT_EN_GPIO}=1
	
		# Wait 150ms at least
		usleep 200000
	
		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
	else
		# WLAN_EN up
		gpioset ${WIFI_EN_GPIO}=1

		# BT_EN up
		gpioset ${BT_EN_GPIO}=1
	
		# Wait 150ms at least
		usleep 200000
	
		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
	fi
	
	# Bind WIFI device to MMC controller
	wifi_mmc_bind

	# Load WIFI driver
	modprobe brcmfmac
}


wifi_down_iw61x()
{
	disable_network_interface wlan0
	disable_network_interface uap0
	disable_network_interface wfd0
	modprobe -r moal;
}

# Power down WIFI chip
wifi_down_bcm43xx()
{
	# Unload WIFI driver
	modprobe -r brcmfmac

	# Unbind WIFI device from MMC controller
	wifi_mmc_unbind

	if som_is_dart_6ul_5g; then
		# WLAN_EN down
		gpioset ${WIFI_EN_GPIO}=0

		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
		usleep 10000

		# WIFI power down
		gpioset ${WIFI_PWR_GPIO}=0
	else
		# WLAN_EN down
		gpioset ${WIFI_EN_GPIO}=0

		# BT_EN down
		gpioset ${BT_EN_GPIO}=0
	fi
}

# Return true if WIFI should be started
wifi_should_not_be_started()
{
	# Do not enable WIFI if it is already up
	[ -d /sys/class/net/wlan0 ] && return 0

	# Do not enable WIFI if booting from SD          
	if grep -q mmcblk0 /proc/cmdline; then
		return 0
	fi

	# Exit if booting from eMMC without WIFI
	if ! grep -qi WIFI /sys/devices/soc0/machine; then
		return 0
	fi

	return 1
}

# Return true if WIFI should not be stopped
wifi_should_not_be_stopped()
{
	# Do not stop WIFI if booting from SD
	if grep -q mmcblk0 /proc/cmdline; then
		return 0
	fi

	# Do not stop WIFI if booting from eMMC without WIFI
	if ! grep -qi WIFI /sys/devices/soc0/machine; then
		return 0
	fi

	return 1
}

# Start WIFI hardware
wifi_start()
{
	# Exit if WIFI should not be started
	wifi_should_not_be_started && exit 0

	# Get the SOM revision
	somrev=$(get_somrev)

	# Try starting WIFI hardware
	for i in $(seq 1 3); do
		# Up WIFI based on SOM revision
		if som_uses_iw61x; then
			wifi_up_iw61x
		else
			wifi_up_bcm43xx
		fi

		# Exit if WIFI interface exists
		wifi_interface_exists && exit 0

		# Down WIFI based on SOM revision
		if som_uses_iw61x; then
			wifi_down_iw61x
		else
			wifi_down_bcm43xx
		fi

		# Wait enough time for discharge
		sleep 5
	done

	exit 1
}

# Stop WIFI hardware
wifi_stop()
{
	# Exit if WIFI should not be stopped
	wifi_should_not_be_stopped && exit 0

	# Get the SOM revision
	somrev=$(get_somrev)

	# Down WIFI based on SOM revision
	if som_uses_iw61x; then
		wifi_down_iw61x
	else
		wifi_down_bcm43xx
	fi
}

###########################
#  Execution starts here  #
###########################
case $1 in
start)
	wifi_start
	;;
stop)
	wifi_stop
	;;
esac

exit 0
