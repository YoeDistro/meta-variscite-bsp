#!/bin/sh -e
#
# Activate Bluetooth on Variscite DART-6UL / VAR-SOM-6UL
#

# GPIO pin to enable BT module
BT_EN_GPIO="gpiochip4 4"

# UART device connected to BT module
BT_TTY_DEV=/dev/ttymxc1

# Sterling LWB BT firmware
BT_FIRMWARE_LWB=/lib/firmware/brcm/BCM43430A1.hcd

# Sterling LWB5 BT firmware
BT_FIRMWARE_LWB5=/lib/firmware/brcm/BCM4335C0.hcd

# Sterling LWB5 WIFI SDIO ID
WIFI_5G_SDIO_ID=0x4339

# WIFI SDIO ID file
WIFI_SDIO_ID_FILE=/sys/class/net/wlan0/device/device


# imx6ul supports multiple chips (bcm43xx, iw61x)
# Assume bcm43xx, and use this function to detect if
# an iw61x is assembled and update BT_CHIP accordingly.
BT_CHIP="bcm43xx"
bt_detect_iw61x()
{
	if [ -f /proc/mwlan/adapter0/config ]; then
		BT_CHIP="iw61x"
	fi
	echo "BT Model: $BT_CHIP"
}

# Get maximum of N numbers
max()
{
  printf "%s\n" "$@" | sort -g -r | head -n1
}

# Set BT MAC address
bt_set_macaddr()
{
  eth0_addr=$(cat /sys/class/net/eth0/address | sed 's/\://g')
  eth1_addr=$(cat /sys/class/net/eth1/address | sed 's/\://g')
  bt_addr=$(max $eth0_addr $eth1_addr)
  bt_addr=$((0x$bt_addr+1))
  bt_addr=$(printf '%012X' $bt_addr)

  BT_MACADDR=$(echo $bt_addr | sed 's/\(..\)/\1:/g;s/:$//')
}

# Set BT firmware based on WIFI SDIO ID
bt_set_firmware()
{
	# Check if WIFI SDIO ID matches Sterling LWB5 SDIO ID
	if [ "$(cat ${WIFI_SDIO_ID_FILE})" = "${WIFI_5G_SDIO_ID}" ]; then
		BT_FIRMWARE=${BT_FIRMWARE_LWB5}
	else
		BT_FIRMWARE=${BT_FIRMWARE_LWB}
	fi
}

# Check if WIFI+BT combo module is available
bt_found()
{
	# Check that WIFI HW was initialized succesfully
	for i in $(seq 1 5); do
		if [ -f ${WIFI_SDIO_ID_FILE} ]; then
			return 0
		else
			sleep 1
		fi
	done

	return 1
}

bt_attach_bcm43xx()
{
	# Set BT firmware file
	bt_set_firmware

	# Set BT MAC addresss
	bt_set_macaddr

	# Start BT firmware loading service
	kill -9 $(pidof brcm_patchram_plus) 2>/dev/null || true
	brcm_patchram_plus \
			--patchram ${BT_FIRMWARE} \
			--enable_hci \
			--bd_addr ${BT_MACADDR} \
			--no2bytes \
			--baudrate 3000000 \
			--scopcm=1,0,0,0,0,0,0,0,0,0 \
			--tosleep 1000 ${BT_TTY_DEV} &
}

bt_attach_iw61x()
{
	# Exit if BT interface is already running
	[ -e /sys/class/bluetooth/hci0 ] && exit 0

	# Initialize and attach the BT device at 115200
	hciattach ${BT_TTY_DEV} any 115200 flow
	sleep 0.5
	hciconfig hci0 up
	hciconfig

	# Use hcitool to change the baud rate
	# Arguments:
	#   0x3f    : HCI_CMD_GROUP_VENDOR_SPECIFIC
	#   0x0009  : HCI_CMD_UART_BAUD
	#   0xc0 0xc6 0x2d 0x00: 3000000
	hcitool -i hci0 cmd 0x3f 0x0009 0xc0 0xc6 0x2d 0x00

	# Kill hciattach after changing the baud
	kill -9 $(pidof hciattach) 2>/dev/null || true
	sleep 0.5

	# Initialize and attach the BT device at 3000000
	hciattach ${BT_TTY_DEV} any 3000000 flow

	# Wait until the HCI interface comes up
	if ! timeout 10 sh -c 'until hciconfig | grep -q "hci"; do sleep 0.1; done'; then
		echo "Error: HCI interface did not come up"
		exit 1
	fi

	# Wait until the Bluetooth MAC address is not 00:00:00:00:00:00
	if ! timeout 10 sh -c 'until [ "$(hciconfig | grep "BD Address" | \
	awk "{print \$3}")" != "00:00:00:00:00:00" ]; do sleep 0.1; done'; then
		echo "Error: Bluetooth MAC address is 00:00:00:00:00:00"
		exit 1
	fi
	sleep 0.5
}

# Enable BT via GPIO(s)
bt_enable()
{
	# Power up BT module
	gpioset ${BT_EN_GPIO}=0
	sleep 1
	gpioset ${BT_EN_GPIO}=1
}

# Start BT hardware
bt_start()
{
	bt_detect_iw61x

	# Exit if booting from SD (BT is not available)
 	grep -q mmcblk0 /proc/cmdline && exit 0

	# Exit if BT module is not available
	bt_found || exit 0

	# Enable BT hardware
	bt_enable

	if [ "${BT_CHIP}" = "iw61x" ]; then
		bt_attach_iw61x
	else
		bt_attach_bcm43xx
	fi
}

bt_stop_bcm43xx()
{
	# Stop BT interface
	hciconfig hci0 down

	# Stop BT firmware loading service
	kill -9 $(pidof brcm_patchram_plus) 2>/dev/null || true
}
bt_stop_iw61x()
{
	# Bring hci0 up if it's down
	if hciconfig hci0 | grep -q "DOWN"; then
		hciconfig hci0 up
	fi
	# Use hcitool to change the baud rate
	# Arguments:
	#   0x3f    : HCI_CMD_GROUP_VENDOR_SPECIFIC
	#   0x0009  : HCI_CMD_UART_BAUD
	#   0x00 0x02 0x1C 0x00: 115200
	hcitool -i hci0 cmd 0x3f 0x0009 0x00 0xC2 0x01 0x00
	sleep 0.5
	# Kill any running hciattach processes
	kill -9 $(pidof hciattach) 2>/dev/null || true
}

# Stop BT hardware
bt_stop()
{
	bt_detect_iw61x

	# Exit if BT interface is not available
	[ -e /sys/class/bluetooth/hci0 ] || exit 0

	if [ "${BT_CHIP}" = "iw61x" ]; then
		bt_attach_iw61x
	else
		bt_attach_bcm43xx
	fi

  	# Power down BT module
	gpioset ${BT_EN_GPIO}=0
}

###########################
#  Execution starts here  #
###########################
case $1 in

start)
	bt_start
	;;
stop)
	bt_stop
	;;
esac

exit 0
